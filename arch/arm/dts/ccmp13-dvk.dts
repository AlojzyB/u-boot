// SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
/*
 * Copyright (C) 2022, Digi International Inc - All Rights Reserved
 */

/dts-v1/;

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/leds/common.h>
#include <dt-bindings/rtc/rtc-stm32.h>
#include "ccmp13.dtsi"

/ {
	model = "Digi International ConnectCore MP13 Development Kit";
	compatible = "digi,ccmp13-dvk", "digi,ccmp13", "digi,ccmp1";

	aliases {
		ethernet0 = &eth1;
		ethernet1 = &eth2;
		serial0 = &uart5;
	};

	chosen {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;
		stdout-path = "serial0:115200n8";
	};

	regulators {
		compatible = "simple-bus";
		#address-cells = <1>;
		#size-cells = <0>;

		reg_3v3_eth_pwr: regulator@1 {
			compatible = "regulator-fixed";
			reg = <1>;
			regulator-name = "3v3_eth_pwr";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			regulator-always-on;
			gpio = <&gpioh 3 GPIO_ACTIVE_HIGH>;
			enable-active-high;
			status = "okay";
		};
	};

	gpio-keys {
		compatible = "gpio-keys";

		user-pa13 {
			label = "User-PA13";
			linux,code = <BTN_1>;
			gpios = <&gpioa 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
		};
	};

	leds {
		compatible = "gpio-leds";

		led-blue {
			function = LED_FUNCTION_HEARTBEAT;
			color = <LED_COLOR_ID_BLUE>;
			gpios = <&gpioa 14 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "heartbeat";
			default-state = "off";
		};
	};

	wifi_pwrseq: wifi-pwrseq {
		compatible = "mmc-pwrseq-simple";
		reset-gpios = <&mcp23017 11 GPIO_ACTIVE_LOW>;
	};
};

/* 10/100/1000 Ethernet */
&eth1 {
	status = "okay";
	pinctrl-0 = <&ccmp13_eth1_rgmii_pins>;
	pinctrl-1 = <&ccmp13_eth1_rgmii_sleep_pins>;
	pinctrl-names = "default", "sleep";
	phy-mode = "rgmii-id";
	max-speed = <1000>;
	phy-handle = <&phy0_eth1>;
	phy-supply = <&reg_3v3_eth_pwr>;

	mdio1 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy0_eth1: ethernet-phy@0 {
			reg = <0>;
			compatible = "ethernet-phy-id0141.0dd0"; /* PHY ID for Marvell 88E1512 */
			reset-gpios = <&gpioi 2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
			reset-assert-us = <1000>;
			reset-deassert-us = <2000>;
		};
	};
};

/* 10/100 Ethernet */
&eth2 {
	status = "disabled";
	pinctrl-0 = <&ccmp13_eth2_rmii_pins>;
	pinctrl-1 = <&ccmp13_eth2_rmii_sleep_pins>;
	pinctrl-names = "default", "sleep";
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0_eth2>;
	st,ext-phyclk;
	phy-supply = <&reg_3v3_eth_pwr>;

	mdio1 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy0_eth2: ethernet-phy@0 {
			reg = <0>;
			compatible = "ethernet-phy-id0007.c0f0"; /* PHY ID for SMSC LAN8720Ai */
			reset-gpios = <&gpioi 2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
		};
	};
};

&i2c1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c1_pins_a>;
	pinctrl-1 = <&i2c1_sleep_pins_a>;
	i2c-scl-rising-time-ns = <96>;
	i2c-scl-falling-time-ns = <3>;
	clock-frequency = <1000000>;
	status = "okay";
	/* spare dmas for other usage */
	/delete-property/dmas;
	/delete-property/dma-names;

	mcp23017: pinctrl@21 {
		compatible = "microchip,mcp23017";
		reg = <0x21>;
		gpio-controller;
		#gpio-cells = <2>;
		interrupts = <12 IRQ_TYPE_LEVEL_LOW>;
		interrupt-parent = <&gpiog>;
		pinctrl-names = "default";
		pinctrl-0 = <&mcp23017_pins_a>;
		interrupt-controller;
		#interrupt-cells = <2>;
		microchip,irq-mirror;
	};

	stm32g0@53 {
		compatible = "st,stm32g0-typec";
		reg = <0x53>;
		/* Alert pin on PI2 */
		interrupts = <2 IRQ_TYPE_EDGE_FALLING>;
		interrupt-parent = <&gpioi>;
		/* Internal pull-up on PI2 */
		pinctrl-names = "default";
		pinctrl-0 = <&stm32g0_intn_pins_a>;
		firmware-name = "stm32g0-ucsi.mp135f-dk.fw";
		power-domains = <&pd_core>;
		wakeup-source;
		connector {
			compatible = "usb-c-connector";
			label = "USB-C";

			port {
				con_usb_c_g0_ep: endpoint {
					remote-endpoint = <&usbotg_hs_ep>;
				};
			};
		};
	};
};

&i2c5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c5_pins_a>;
	pinctrl-1 = <&i2c5_sleep_pins_a>;
	i2c-scl-rising-time-ns = <170>;
	i2c-scl-falling-time-ns = <5>;
	clock-frequency = <400000>;
	status = "disabled";
	/* spare dmas for other usage */
	/delete-property/dmas;
	/delete-property/dma-names;
};

&iwdg2 {
	timeout-sec = <32>;
	status = "okay";
};


&rtc {
	st,lsco = <RTC_OUT2_RMP>;
	pinctrl-0 = <&rtc_out2_rmp_pins_a>;
	pinctrl-names = "default";
	status = "okay";
};

&scmi_regu {
	scmi_vddcpu: voltd-vddcpu {
		voltd-name = "vddcpu";
		regulator-name = "vddcpu";
	};
	scmi_vdd: voltd-vdd {
		voltd-name = "vdd";
		regulator-name = "vdd";
	};
	scmi_vddcore: voltd-vddcore {
		voltd-name = "vddcore";
		regulator-name = "vddcore";
	};
	scmi_vdd_adc: voltd-vdd_adc {
		voltd-name = "vdd_adc";
		regulator-name = "vdd_adc";
	};
	scmi_vdd_usb: voltd-vdd_usb {
		voltd-name = "vdd_usb";
		regulator-name = "vdd_usb";
	};
	scmi_vdd_sd: voltd-vdd_sd {
		voltd-name = "vdd_sd";
		regulator-name = "vdd_sd";
	};
	scmi_v1v8_periph: voltd-v1v8_periph {
		voltd-name = "v1v8_periph";
		regulator-name = "v1v8_periph";
	};
	scmi_v3v3_sw: voltd-v3v3_sw {
		voltd-name = "v3v3_sw";
		regulator-name = "v3v3_sw";
	};
};

&sdmmc1 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_b4_pins_a &sdmmc1_clk_pins_a>;
	pinctrl-1 = <&sdmmc1_b4_od_pins_a &sdmmc1_clk_pins_a>;
	pinctrl-2 = <&sdmmc1_b4_sleep_pins_a>;
	broken-cd;
	disable-wp;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&scmi_vdd_sd>;
	status = "okay";
};

&spi5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi5_pins_a>;
	pinctrl-1 = <&spi5_sleep_pins_a>;
	status = "disabled";
};

&timers3 {
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "disabled";
	pwm {
		pinctrl-0 = <&pwm3_pins_a>;
		pinctrl-1 = <&pwm3_sleep_pins_a>;
		pinctrl-names = "default", "sleep";
		status = "okay";
	};
	timer@2 {
		status = "okay";
	};
};

&timers4 {
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "disabled";
	pwm {
		pinctrl-0 = <&pwm4_pins_a>;
		pinctrl-1 = <&pwm4_sleep_pins_a>;
		pinctrl-names = "default", "sleep";
		status = "okay";
	};
	timer@3 {
		status = "okay";
	};
};

&timers8 {
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "disabled";
	pwm {
		pinctrl-0 = <&pwm8_pins_a>;
		pinctrl-1 = <&pwm8_sleep_pins_a>;
		pinctrl-names = "default", "sleep";
		status = "okay";
	};
	timer@7 {
		status = "okay";
	};
};

&timers14 {
	status = "disabled";
	pwm {
		pinctrl-0 = <&pwm14_pins_a>;
		pinctrl-1 = <&pwm14_sleep_pins_a>;
		pinctrl-names = "default", "sleep";
		status = "okay";
	};
	timer@13 {
		status = "okay";
	};
};

/* Console on UART5 */
&uart5 {
	pinctrl-names = "default", "sleep", "idle";
	pinctrl-0 = <&uart5_pins_a>;
	pinctrl-1 = <&uart5_sleep_pins_a>;
	pinctrl-2 = <&uart5_idle_pins_a>;
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "okay";
};

&usbh_ehci {
	phys = <&usbphyc_port0>;
	status = "okay";
};

&usbotg_hs {
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	usb-role-switch;
	status = "okay";
	port {
		usbotg_hs_ep: endpoint {
			remote-endpoint = <&con_usb_c_g0_ep>;
		};
	};
};

&usbphyc {
	status = "okay";
};

&usbphyc_port0 {
	phy-supply = <&scmi_vdd_usb>;
	st,current-boost-microamp = <1000>;
	st,decrease-hs-slew-rate;
	st,tune-hs-dc-level = <2>;
	st,enable-hs-rftime-reduction;
	st,trim-hs-current = <11>;
	st,trim-hs-impedance = <2>;
	st,tune-squelch-level = <1>;
	st,enable-hs-rx-gain-eq;
	st,no-hs-ftime-ctrl;
	st,no-lsfs-sc;

	/*
	 * Hack to keep hub active if wakeup source is enabled
	 * otherwise the hub will wakeup the port0 as soon as the v3v3_sw is disabled
	 */
	connector {
		compatible = "usb-a-connector";
		vbus-supply = <&scmi_v3v3_sw>;
	};
};

&usbphyc_port1 {
	phy-supply = <&scmi_vdd_usb>;
	st,current-boost-microamp = <1000>;
	st,decrease-hs-slew-rate;
	st,tune-hs-dc-level = <2>;
	st,enable-hs-rftime-reduction;
	st,trim-hs-current = <11>;
	st,trim-hs-impedance = <2>;
	st,tune-squelch-level = <1>;
	st,enable-hs-rx-gain-eq;
	st,no-hs-ftime-ctrl;
	st,no-lsfs-sc;
};

&pinctrl {
	ccmp13_eth1_rgmii_pins: ccmp13-eth1-rgmii-1 {
		pins1 {
			pinmux = <STM32_PINMUX('F', 12, AF11)>, /* ETH1_CLK125 */
				 <STM32_PINMUX('C', 1,  AF11)>, /* ETH1_GTX_CLK */
				 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
				 <STM32_PINMUX('G', 14, AF11)>, /* ETH1_TXD1 */
				 <STM32_PINMUX('C', 2,  AF11)>, /* ETH1_TXD2 */
				 <STM32_PINMUX('E', 5,  AF10)>, /* ETH1_TXD3 */
				 <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_EN */
				 <STM32_PINMUX('G', 2,  AF11)>; /* ETH1_MDC */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
				 <STM32_PINMUX('C', 5, AF11)>, /* ETH1_RXD1 */
				 <STM32_PINMUX('B', 0, AF11)>, /* ETH1_RXD2 */
				 <STM32_PINMUX('B', 1, AF11)>, /* ETH1_RXD3 */
				 <STM32_PINMUX('D', 7, AF10)>, /* ETH1_REF_CLK */
				 <STM32_PINMUX('A', 7, AF11)>; /* ETH1_RX_DV */
			bias-disable;
		};
	};

	ccmp13_eth1_rgmii_sleep_pins: ccmp13-eth1-rgmii-sleep-1 {
		pins1 {
			pinmux = <STM32_PINMUX('F', 12, ANALOG)>, /* ETH1_CLK125 */
				 <STM32_PINMUX('C', 1,  ANALOG)>, /* ETH1_GTX_CLK */
				 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
				 <STM32_PINMUX('G', 14, ANALOG)>, /* ETH1_TXD1 */
				 <STM32_PINMUX('C', 2,  ANALOG)>, /* ETH1_TXD2 */
				 <STM32_PINMUX('E', 5,  ANALOG)>, /* ETH1_TXD3 */
				 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
				 <STM32_PINMUX('G', 2,  ANALOG)>, /* ETH1_MDC */
				 <STM32_PINMUX('A', 2,  ANALOG)>, /* ETH1_MDIO */
				 <STM32_PINMUX('C', 4,  ANALOG)>, /* ETH1_RXD0 */
				 <STM32_PINMUX('C', 5,  ANALOG)>, /* ETH1_RXD1 */
				 <STM32_PINMUX('B', 0,  ANALOG)>, /* ETH1_RXD2 */
				 <STM32_PINMUX('B', 1,  ANALOG)>, /* ETH1_RXD3 */
				 <STM32_PINMUX('D', 7,  ANALOG)>, /* ETH1_REF_CLK */
				 <STM32_PINMUX('A', 7,  ANALOG)>; /* ETH1_RX_DV */
		 };
	};

	ccmp13_eth2_rmii_pins: ccmp13-eth2-rmii-1 {
		pins1 {
			pinmux = <STM32_PINMUX('F', 7,  AF11)>, /* ETH2_TXD0 */
				 <STM32_PINMUX('G', 11, AF10)>, /* ETH2_TXD1 */
				 <STM32_PINMUX('H', 11, AF11)>, /* ETH2_REF_CLK */
				 <STM32_PINMUX('F', 6,  AF11)>, /* ETH2_TX_EN */
				 <STM32_PINMUX('B', 2,  AF11)>, /* ETH2_MDIO */
				 <STM32_PINMUX('G', 5,  AF10)>; /* ETH2_MDC */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('F', 4,  AF11)>, /* ETH2_RXD0 */
				 <STM32_PINMUX('E', 2,  AF10)>, /* ETH2_RXD1 */
				 <STM32_PINMUX('A', 12, AF11)>; /* ETH2_RX_DV */
			bias-disable;
		};
	};

	ccmp13_eth2_rmii_sleep_pins: ccmp13-eth2-rmii-sleep-1 {
		pins1 {
			pinmux = <STM32_PINMUX('F', 7,  ANALOG)>, /* ETH2_TXD0 */
				 <STM32_PINMUX('G', 11, ANALOG)>, /* ETH2_TXD1 */
				 <STM32_PINMUX('H', 11, ANALOG)>, /* ETH2_REF_CLK */
				 <STM32_PINMUX('F', 6,  ANALOG)>, /* ETH2_TX_EN */
				 <STM32_PINMUX('B', 2,  ANALOG)>, /* ETH2_MDIO */
				 <STM32_PINMUX('G', 5,  ANALOG)>, /* ETH2_MDC */
				 <STM32_PINMUX('F', 4,  ANALOG)>, /* ETH2_RXD0 */
				 <STM32_PINMUX('E', 2,  ANALOG)>, /* ETH2_RXD1 */
				 <STM32_PINMUX('A', 12, ANALOG)>; /* ETH2_RX_DV */
		};
	};

	uart5_pins_a: uart5-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 0, AF8)>; /* UART5_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('F', 13, AF8)>; /* UART5_RX */
			bias-disable;
		};
	};

	uart5_idle_pins_a: uart5-idle-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 0, ANALOG)>; /* UART5_TX */
		};
		pins2 {
			pinmux = <STM32_PINMUX('F', 13, AF8)>; /* UART5_RX */
			bias-disable;
		};
	};

	uart5_sleep_pins_a: uart5-sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 0, ANALOG)>, /* UART5_TX */
				 <STM32_PINMUX('F', 13, ANALOG)>; /* UART5_RX */
		};
	};
};
