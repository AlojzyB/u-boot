/*
 * Copyright 2019 Digi International Inc
 * Copyright 2018-2019 NXP
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/dts-v1/;

#include <dt-bindings/usb/pd.h>
#include "imx8mn.dtsi"

/ {
	model = "Digi ConnectCore 8M Nano Development Kit";
	compatible = "digi,ccimx8mn", "digi,ccimx8mn-dvk", "fsl,imx8mn-evk", "fsl,imx8mn";

	/*
	 * Some tools (like fw_printenv) rely on fixed mmcblk device indexes
	 * but these are not guaranteed by the kernel.
	 * The use of aliases allows to reorder the mmcblk indexes of every
	 * mmc device. Notice that using aliases requires that ALL mmc devices
	 * have one.
	 */
	aliases {
		mmc0 = &usdhc3;		/* eMMC */
		mmc1 = &usdhc2;		/* microSD */
		mmc2 = &usdhc1;
	};

	chosen {
		bootargs = "console=ttymxc0,115200 earlycon=ec_imx6q,0x30860000,115200";
		stdout-path = &uart1;
	};

	regulators {
		compatible = "simple-bus";
		#address-cells = <1>;
		#size-cells = <0>;

		reg_3v3_usb_hub: regulator@4 {
			compatible = "regulator-fixed";
			reg = <4>;
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_reg_3v3_usb_hub>;
			regulator-name = "3v3_usb_hub";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			gpio = <&gpio3 25 GPIO_ACTIVE_HIGH>;
			enable-active-high;
		};
	};

	thermal-zones {
		/* cpu thermal */
		cpu-thermal {
			polling-delay-passive = <250>;
			polling-delay = <2000>;
			thermal-sensors = <&tmu>;
			trips {
				cpu_alert0: trip0 {
					temperature = <85000>;
					hysteresis = <2000>;
					type = "passive";
				};
				cpu_crit0: trip1 {
					temperature = <100000>;
					hysteresis = <2000>;
					type = "critical";
				};
			};
		};
	};

	mca_gpio_uboot: mca_gpio {
		compatible = "digi,mca-gpio";
		gpio-controller;
	};

	mca_rtc_uboot: mca_rtc {
		compatible = "digi,mca-rtc";
	};

	mca_wdt_uboot: mca_wdt {
		compatible = "digi,mca-wdt";

		soft-rfsh {
			digi,full-reset;
			digi,no-way-out;
		};
	};
};

&iomuxc {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_hog_1>;

	imx8mn-evk {
		pinctrl_hog_1: hoggrp-1 {
			fsl,pins = <
				MX8MN_IOMUXC_GPIO1_IO08_GPIO1_IO8		0x16
			>;
		};

		pinctrl_fec1: fec1grp {
			fsl,pins = <
				MX8MN_IOMUXC_ENET_MDC_ENET1_MDC		0x3
				MX8MN_IOMUXC_ENET_MDIO_ENET1_MDIO	0x3
				MX8MN_IOMUXC_ENET_TD3_ENET1_RGMII_TD3	0x1f
				MX8MN_IOMUXC_ENET_TD2_ENET1_RGMII_TD2	0x1f
				MX8MN_IOMUXC_ENET_TD1_ENET1_RGMII_TD1	0x1f
				MX8MN_IOMUXC_ENET_TD0_ENET1_RGMII_TD0	0x1f
				MX8MN_IOMUXC_ENET_RD3_ENET1_RGMII_RD3	0x91
				MX8MN_IOMUXC_ENET_RD2_ENET1_RGMII_RD2	0x91
				MX8MN_IOMUXC_ENET_RD1_ENET1_RGMII_RD1	0x91
				MX8MN_IOMUXC_ENET_RD0_ENET1_RGMII_RD0	0x91
				MX8MN_IOMUXC_ENET_TXC_ENET1_RGMII_TXC	0x1f
				MX8MN_IOMUXC_ENET_RXC_ENET1_RGMII_RXC	0x91
				MX8MN_IOMUXC_ENET_RX_CTL_ENET1_RGMII_RX_CTL	0x91
				MX8MN_IOMUXC_ENET_TX_CTL_ENET1_RGMII_TX_CTL	0x1f
				/* PHY reset */
				MX8MN_IOMUXC_SPDIF_TX_GPIO5_IO3	0x19
				/* PHY power */
				MX8MN_IOMUXC_SPDIF_RX_GPIO5_IO4	0x19
			>;
		};

		pinctrl_flexspi0: flexspi0grp {
			fsl,pins = <
				MX8MN_IOMUXC_NAND_ALE_QSPI_A_SCLK 0x1c4
				MX8MN_IOMUXC_NAND_CE0_B_QSPI_A_SS0_B 0x84

				MX8MN_IOMUXC_NAND_DATA00_QSPI_A_DATA0 0x84
				MX8MN_IOMUXC_NAND_DATA01_QSPI_A_DATA1 0x84
				MX8MN_IOMUXC_NAND_DATA02_QSPI_A_DATA2 0x84
				MX8MN_IOMUXC_NAND_DATA03_QSPI_A_DATA3 0x84
			>;
		};

		pinctrl_i2c1: i2c1grp {
			fsl,pins = <
				MX8MN_IOMUXC_I2C1_SCL_I2C1_SCL			0x400001c3
				MX8MN_IOMUXC_I2C1_SDA_I2C1_SDA			0x400001c3
			>;
		};

		pinctrl_i2c2: i2c2grp {
			fsl,pins = <
				MX8MN_IOMUXC_I2C2_SCL_I2C2_SCL			0x400001c3
				MX8MN_IOMUXC_I2C2_SDA_I2C2_SDA			0x400001c3
			>;
		};

		pinctrl_i2c3: i2c3grp {
			fsl,pins = <
				MX8MN_IOMUXC_I2C3_SCL_I2C3_SCL			0x400001c3
				MX8MN_IOMUXC_I2C3_SDA_I2C3_SDA			0x400001c3
			>;
		};

		pinctrl_i2c1_gpio: i2c1grp-gpio {
			fsl,pins = <
				MX8MN_IOMUXC_I2C1_SCL_GPIO5_IO14        		0x1c3
				MX8MN_IOMUXC_I2C1_SDA_GPIO5_IO15        	0x1c3
			>;
		};

		pinctrl_i2c2_gpio: i2c2grp-gpio {
			fsl,pins = <
				MX8MN_IOMUXC_I2C2_SCL_GPIO5_IO16        		0x1c3
				MX8MN_IOMUXC_I2C2_SDA_GPIO5_IO17        	0x1c3
			>;
		};

		pinctrl_i2c3_gpio: i2c3grp-gpio {
			fsl,pins = <
				MX8MN_IOMUXC_I2C3_SCL_GPIO5_IO18        		0x1c3
				MX8MN_IOMUXC_I2C3_SDA_GPIO5_IO19        	0x1c3
			>;
		};

		pinctrl_pmic: pmicirq {
			fsl,pins = <
				MX8MN_IOMUXC_GPIO1_IO03_GPIO1_IO3		0x41
			>;
		};

		pinctrl_reg_3v3_usb_hub: reg_3v3_usb_hub_grp {
			fsl,pins = <
				/* GPIO3_25 USB hub power enable */
				MX8MN_IOMUXC_SAI5_MCLK_GPIO3_IO25		0x41
			>;
		};

		pinctrl_uart1: uart1grp {
			fsl,pins = <
				MX8MN_IOMUXC_SAI2_RXC_UART1_DCE_RX	0x49
				MX8MN_IOMUXC_SAI2_RXFS_UART1_DCE_TX	0x49
			>;
		};

		pinctrl_usbotg1: usbotg1grp {
			fsl,pins = <
				/* USB hub reset */
				MX8MN_IOMUXC_ECSPI2_SCLK_GPIO5_IO10		0x16
			>;
		};

		pinctrl_usdhc2_gpio: usdhc2grpgpio {
			fsl,pins = <
				/* Card detect */
				MX8MN_IOMUXC_SD2_CD_B_GPIO2_IO12	0x1d0
				/* MUX_VSELECT */
				MX8MN_IOMUXC_SAI3_TXD_GPIO5_IO1	0x190
			>;
		};

		pinctrl_usdhc2: usdhc2grp {
			fsl,pins = <
				MX8MN_IOMUXC_SD2_CLK_USDHC2_CLK	0x190
				MX8MN_IOMUXC_SD2_CMD_USDHC2_CMD	0x1d0
				MX8MN_IOMUXC_SD2_DATA0_USDHC2_DATA0	0x1d0
				MX8MN_IOMUXC_SD2_DATA1_USDHC2_DATA1	0x1d0
				MX8MN_IOMUXC_SD2_DATA2_USDHC2_DATA2	0x1d0
				MX8MN_IOMUXC_SD2_DATA3_USDHC2_DATA3	0x1d0
			>;
		};

		pinctrl_usdhc2_100mhz: usdhc2grp100mhz {
			fsl,pins = <
				MX8MN_IOMUXC_SD2_CLK_USDHC2_CLK	0x194
				MX8MN_IOMUXC_SD2_CMD_USDHC2_CMD	0x1d4
				MX8MN_IOMUXC_SD2_DATA0_USDHC2_DATA0	0x1d4
				MX8MN_IOMUXC_SD2_DATA1_USDHC2_DATA1	0x1d4
				MX8MN_IOMUXC_SD2_DATA2_USDHC2_DATA2	0x1d4
				MX8MN_IOMUXC_SD2_DATA3_USDHC2_DATA3	0x1d4
			>;
		};

		pinctrl_usdhc2_200mhz: usdhc2grp200mhz {
			fsl,pins = <
				MX8MN_IOMUXC_SD2_CLK_USDHC2_CLK	0x196
				MX8MN_IOMUXC_SD2_CMD_USDHC2_CMD	0x1d6
				MX8MN_IOMUXC_SD2_DATA0_USDHC2_DATA0	0x1d6
				MX8MN_IOMUXC_SD2_DATA1_USDHC2_DATA1	0x1d6
				MX8MN_IOMUXC_SD2_DATA2_USDHC2_DATA2	0x1d6
				MX8MN_IOMUXC_SD2_DATA3_USDHC2_DATA3	0x1d6
			>;
		};

		pinctrl_usdhc3: usdhc3grp {
			fsl,pins = <
				MX8MN_IOMUXC_NAND_WE_B_USDHC3_CLK		0x40000190
				MX8MN_IOMUXC_NAND_WP_B_USDHC3_CMD		0x1d0
				MX8MN_IOMUXC_NAND_DATA04_USDHC3_DATA0		0x1d0
				MX8MN_IOMUXC_NAND_DATA05_USDHC3_DATA1		0x1d0
				MX8MN_IOMUXC_NAND_DATA06_USDHC3_DATA2		0x1d0
				MX8MN_IOMUXC_NAND_DATA07_USDHC3_DATA3		0x1d0
				MX8MN_IOMUXC_NAND_RE_B_USDHC3_DATA4		0x1d0
				MX8MN_IOMUXC_NAND_CE2_B_USDHC3_DATA5		0x1d0
				MX8MN_IOMUXC_NAND_CE3_B_USDHC3_DATA6		0x1d0
				MX8MN_IOMUXC_NAND_CLE_USDHC3_DATA7		0x1d0
				MX8MN_IOMUXC_NAND_CE1_B_USDHC3_STROBE 		0x190
				MX8MN_IOMUXC_NAND_READY_B_USDHC3_RESET_B	0xc1
			>;
		};

		pinctrl_usdhc3_100mhz: usdhc3grp100mhz {
			fsl,pins = <
				MX8MN_IOMUXC_NAND_WE_B_USDHC3_CLK		0x40000194
				MX8MN_IOMUXC_NAND_WP_B_USDHC3_CMD		0x1d4
				MX8MN_IOMUXC_NAND_DATA04_USDHC3_DATA0		0x1d4
				MX8MN_IOMUXC_NAND_DATA05_USDHC3_DATA1		0x1d4
				MX8MN_IOMUXC_NAND_DATA06_USDHC3_DATA2		0x1d4
				MX8MN_IOMUXC_NAND_DATA07_USDHC3_DATA3		0x1d4
				MX8MN_IOMUXC_NAND_RE_B_USDHC3_DATA4		0x1d4
				MX8MN_IOMUXC_NAND_CE2_B_USDHC3_DATA5		0x1d4
				MX8MN_IOMUXC_NAND_CE3_B_USDHC3_DATA6		0x1d4
				MX8MN_IOMUXC_NAND_CLE_USDHC3_DATA7		0x1d4
				MX8MN_IOMUXC_NAND_CE1_B_USDHC3_STROBE 		0x194
				MX8MN_IOMUXC_NAND_READY_B_USDHC3_RESET_B	0xc1
			>;
		};

		pinctrl_usdhc3_200mhz: usdhc3grp200mhz {
			fsl,pins = <
				MX8MN_IOMUXC_NAND_WE_B_USDHC3_CLK		0x40000196
				MX8MN_IOMUXC_NAND_WP_B_USDHC3_CMD		0x1d6
				MX8MN_IOMUXC_NAND_DATA04_USDHC3_DATA0		0x1d6
				MX8MN_IOMUXC_NAND_DATA05_USDHC3_DATA1		0x1d6
				MX8MN_IOMUXC_NAND_DATA06_USDHC3_DATA2		0x1d6
				MX8MN_IOMUXC_NAND_DATA07_USDHC3_DATA3		0x1d6
				MX8MN_IOMUXC_NAND_RE_B_USDHC3_DATA4		0x1d6
				MX8MN_IOMUXC_NAND_CE2_B_USDHC3_DATA5		0x1d6
				MX8MN_IOMUXC_NAND_CE3_B_USDHC3_DATA6		0x1d6
				MX8MN_IOMUXC_NAND_CLE_USDHC3_DATA7		0x1d6
				MX8MN_IOMUXC_NAND_CE1_B_USDHC3_STROBE 		0x196
				MX8MN_IOMUXC_NAND_READY_B_USDHC3_RESET_B	0xc1
			>;
		};

		pinctrl_wdog: wdoggrp {
			fsl,pins = <
				MX8MN_IOMUXC_GPIO1_IO02_WDOG1_WDOG_B		0xc6
			>;
		};
	};
};

&i2c1 {
	clock-frequency = <100000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c1>;
	pinctrl-1 = <&pinctrl_i2c1_gpio>;
	scl-gpios = <&gpio5 14 GPIO_ACTIVE_HIGH>;
	sda-gpios = <&gpio5 15 GPIO_ACTIVE_HIGH>;
	status = "okay";

	/*
	 * This PMIC is only present in ccimx8mn revisions 2 and higher, revision 1
	 * of the SOM uses the bd71837. This causes errors when attempting to use
	 * the "pmic" command in v1 SOMs. The initialization of the PMIC is handled
	 * in the SPL without using device tree information, and is compatible with
	 * both PMICs.
	 */
	pmic: pca9450@25 {
		reg = <0x25>;
		compatible = "nxp,pca9450b";

		gpo {
			nxp,drv = <0x0C>;	/* 0b0000_1100 all gpos with cmos output mode */
		};

		regulators {
			#address-cells = <1>;
			#size-cells = <0>;

			pca9450,pmic-buck2-uses-i2c-dvs;
			pca9450,pmic-buck2-dvs-voltage = <1000000>, <900000>, <0>; /* VDD_ARM: Run-Idle */

			buck1_reg: regulator@0 {
				reg = <0>;
				regulator-compatible = "buck1";
				regulator-min-microvolt = <600000>;
				regulator-max-microvolt = <2187500>;
				regulator-boot-on;
				regulator-always-on;
				regulator-ramp-delay = <3125>;
			};

			buck2_reg: regulator@1 {
				reg = <1>;
				regulator-compatible = "buck2";
				regulator-min-microvolt = <600000>;
				regulator-max-microvolt = <2187500>;
				regulator-boot-on;
				regulator-always-on;
				regulator-ramp-delay = <3125>;
			};

			buck3_reg: regulator@2 {
				reg = <2>;
				regulator-compatible = "buck3";
				regulator-min-microvolt = <600000>;
				regulator-max-microvolt = <2187500>;
				regulator-boot-on;
				regulator-always-on;
			};

			buck4_reg: regulator@3 {
				reg = <3>;
				regulator-compatible = "buck4";
				regulator-min-microvolt = <600000>;
				regulator-max-microvolt = <3400000>;
				regulator-boot-on;
				regulator-always-on;
			};

			buck5_reg: regulator@4 {
				reg = <4>;
				regulator-compatible = "buck5";
				regulator-min-microvolt = <600000>;
				regulator-max-microvolt = <3400000>;
				regulator-boot-on;
				regulator-always-on;
			};

			buck6_reg: regulator@5 {
				reg = <5>;
				regulator-compatible = "buck6";
				regulator-min-microvolt = <600000>;
				regulator-max-microvolt = <3400000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo1_reg: regulator@6 {
				reg = <6>;
				regulator-compatible = "ldo1";
				regulator-min-microvolt = <1600000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo2_reg: regulator@7 {
				reg = <7>;
				regulator-compatible = "ldo2";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <1150000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo3_reg: regulator@8 {
				reg = <8>;
				regulator-compatible = "ldo3";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo4_reg: regulator@9 {
				reg = <9>;
				regulator-compatible = "ldo4";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo5_reg: regulator@10 {
				reg = <10>;
				regulator-compatible = "ldo5";
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <3300000>;
			};

		};
	};
};

&i2c2 {
	clock-frequency = <400000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c2>;
	pinctrl-1 = <&pinctrl_i2c2_gpio>;
	scl-gpios = <&gpio5 16 GPIO_ACTIVE_HIGH>;
	sda-gpios = <&gpio5 17 GPIO_ACTIVE_HIGH>;
	status = "okay";
};

&i2c3 {
	clock-frequency = <100000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c3>;
	pinctrl-1 = <&pinctrl_i2c3_gpio>;
	scl-gpios = <&gpio5 18 GPIO_ACTIVE_HIGH>;
	sda-gpios = <&gpio5 19 GPIO_ACTIVE_HIGH>;
	status = "okay";
};

&flexspi {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_flexspi0>;
	status = "okay";

	flash0: n25q256a@0 {
		reg = <0>;
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "spi-flash";
		spi-max-frequency = <29000000>;
		spi-nor,ddr-quad-read-dummy = <8>;
	};
};

&fec1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_fec1>;
	phy-mode = "rgmii-id";
	phy-handle = <&ethphy0>;
	fsl,magic-packet;
	status = "okay";

	mdio {
		#address-cells = <1>;
		#size-cells = <0>;

		ethphy0: ethernet-phy@0 {
			compatible = "ethernet-phy-ieee802.3-c22";
			reg = <0>;
			at803x,led-act-blind-workaround;
			at803x,eee-okay;
			at803x,vddio-1p8v;
		};
	};
};

&uart1 { /* console */
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart1>;
	status = "okay";
};

&usdhc2 {
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
	pinctrl-1 = <&pinctrl_usdhc2_100mhz>, <&pinctrl_usdhc2_gpio>;
	pinctrl-2 = <&pinctrl_usdhc2_200mhz>, <&pinctrl_usdhc2_gpio>;
	cd-gpios = <&gpio2 12 GPIO_ACTIVE_HIGH>;
	/* Assert GPIO5_IO1 low for 3V3 (default) or high for 1.8V */
	pinctrl-assert-gpios = <&gpio5 1 GPIO_ACTIVE_LOW>;
	/* 1.8V currently unsupported */
	no-1-8-v;
	bus-width = <4>;
	status = "okay";
};

&usdhc3 {
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_usdhc3>;
	pinctrl-1 = <&pinctrl_usdhc3_100mhz>;
	pinctrl-2 = <&pinctrl_usdhc3_200mhz>;
	bus-width = <8>;
	non-removable;
	status = "okay";
};

&wdog1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_wdog>;
	fsl,ext-reset-output;
	status = "okay";
};

&A53_0 {
	arm-supply = <&buck2_reg>;
};

/* USB_OTG1 connected to usb hub */
&usbotg1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usbotg1>;
	vbus-supply = <&reg_3v3_usb_hub>;
	fsl,reset-gpio = <&gpio5 10 GPIO_ACTIVE_LOW>;
	dr_mode = "peripheral"; /* Set "host" to use a USB mass storage */
	disable-over-current;
	status = "okay";
};
